// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shoporder.proto

package go_micro_service_shop_order

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllOrderRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllOrderRequest) Reset()         { *m = AllOrderRequest{} }
func (m *AllOrderRequest) String() string { return proto.CompactTextString(m) }
func (*AllOrderRequest) ProtoMessage()    {}
func (*AllOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{0}
}
func (m *AllOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllOrderRequest.Merge(m, src)
}
func (m *AllOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllOrderRequest proto.InternalMessageInfo

type AllOrder struct {
	OrderInfo            []*OrderInfo `protobuf:"bytes,1,rep,name=order_info,json=orderInfo,proto3" json:"order_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AllOrder) Reset()         { *m = AllOrder{} }
func (m *AllOrder) String() string { return proto.CompactTextString(m) }
func (*AllOrder) ProtoMessage()    {}
func (*AllOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{1}
}
func (m *AllOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllOrder.Merge(m, src)
}
func (m *AllOrder) XXX_Size() int {
	return m.Size()
}
func (m *AllOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_AllOrder.DiscardUnknown(m)
}

var xxx_messageInfo_AllOrder proto.InternalMessageInfo

func (m *AllOrder) GetOrderInfo() []*OrderInfo {
	if m != nil {
		return m.OrderInfo
	}
	return nil
}

type OrderID struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderID) Reset()         { *m = OrderID{} }
func (m *OrderID) String() string { return proto.CompactTextString(m) }
func (*OrderID) ProtoMessage()    {}
func (*OrderID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{2}
}
func (m *OrderID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderID.Merge(m, src)
}
func (m *OrderID) XXX_Size() int {
	return m.Size()
}
func (m *OrderID) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderID.DiscardUnknown(m)
}

var xxx_messageInfo_OrderID proto.InternalMessageInfo

func (m *OrderID) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type OrderInfo struct {
	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PayStatus            int32          `protobuf:"varint,2,opt,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"`
	ShipStatus           int32          `protobuf:"varint,3,opt,name=ship_status,json=shipStatus,proto3" json:"ship_status,omitempty"`
	Price                float64        `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	OrderDetail          []*OrderDetail `protobuf:"bytes,5,rep,name=order_detail,json=orderDetail,proto3" json:"order_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OrderInfo) Reset()         { *m = OrderInfo{} }
func (m *OrderInfo) String() string { return proto.CompactTextString(m) }
func (*OrderInfo) ProtoMessage()    {}
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{3}
}
func (m *OrderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderInfo.Merge(m, src)
}
func (m *OrderInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrderInfo proto.InternalMessageInfo

func (m *OrderInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OrderInfo) GetPayStatus() int32 {
	if m != nil {
		return m.PayStatus
	}
	return 0
}

func (m *OrderInfo) GetShipStatus() int32 {
	if m != nil {
		return m.ShipStatus
	}
	return 0
}

func (m *OrderInfo) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderInfo) GetOrderDetail() []*OrderDetail {
	if m != nil {
		return m.OrderDetail
	}
	return nil
}

type OrderDetail struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductNum           int64    `protobuf:"varint,3,opt,name=product_num,json=productNum,proto3" json:"product_num,omitempty"`
	ProductSizeId        int64    `protobuf:"varint,4,opt,name=product_size_id,json=productSizeId,proto3" json:"product_size_id,omitempty"`
	ProductPrice         int64    `protobuf:"varint,5,opt,name=product_price,json=productPrice,proto3" json:"product_price,omitempty"`
	OrderId              int64    `protobuf:"varint,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderDetail) Reset()         { *m = OrderDetail{} }
func (m *OrderDetail) String() string { return proto.CompactTextString(m) }
func (*OrderDetail) ProtoMessage()    {}
func (*OrderDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{4}
}
func (m *OrderDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDetail.Merge(m, src)
}
func (m *OrderDetail) XXX_Size() int {
	return m.Size()
}
func (m *OrderDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDetail.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDetail proto.InternalMessageInfo

func (m *OrderDetail) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OrderDetail) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *OrderDetail) GetProductNum() int64 {
	if m != nil {
		return m.ProductNum
	}
	return 0
}

func (m *OrderDetail) GetProductSizeId() int64 {
	if m != nil {
		return m.ProductSizeId
	}
	return 0
}

func (m *OrderDetail) GetProductPrice() int64 {
	if m != nil {
		return m.ProductPrice
	}
	return 0
}

func (m *OrderDetail) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PayStatus struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	PayStatus            int32    `protobuf:"varint,2,opt,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayStatus) Reset()         { *m = PayStatus{} }
func (m *PayStatus) String() string { return proto.CompactTextString(m) }
func (*PayStatus) ProtoMessage()    {}
func (*PayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{6}
}
func (m *PayStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayStatus.Merge(m, src)
}
func (m *PayStatus) XXX_Size() int {
	return m.Size()
}
func (m *PayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PayStatus proto.InternalMessageInfo

func (m *PayStatus) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PayStatus) GetPayStatus() int32 {
	if m != nil {
		return m.PayStatus
	}
	return 0
}

type ShipStatus struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ShipStatus           int32    `protobuf:"varint,2,opt,name=ship_status,json=shipStatus,proto3" json:"ship_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShipStatus) Reset()         { *m = ShipStatus{} }
func (m *ShipStatus) String() string { return proto.CompactTextString(m) }
func (*ShipStatus) ProtoMessage()    {}
func (*ShipStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36545d7e981a3b1, []int{7}
}
func (m *ShipStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShipStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShipStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShipStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipStatus.Merge(m, src)
}
func (m *ShipStatus) XXX_Size() int {
	return m.Size()
}
func (m *ShipStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ShipStatus proto.InternalMessageInfo

func (m *ShipStatus) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *ShipStatus) GetShipStatus() int32 {
	if m != nil {
		return m.ShipStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*AllOrderRequest)(nil), "go.micro.service.shop.order.AllOrderRequest")
	proto.RegisterType((*AllOrder)(nil), "go.micro.service.shop.order.AllOrder")
	proto.RegisterType((*OrderID)(nil), "go.micro.service.shop.order.OrderID")
	proto.RegisterType((*OrderInfo)(nil), "go.micro.service.shop.order.OrderInfo")
	proto.RegisterType((*OrderDetail)(nil), "go.micro.service.shop.order.OrderDetail")
	proto.RegisterType((*Response)(nil), "go.micro.service.shop.order.Response")
	proto.RegisterType((*PayStatus)(nil), "go.micro.service.shop.order.PayStatus")
	proto.RegisterType((*ShipStatus)(nil), "go.micro.service.shop.order.ShipStatus")
}

func init() { proto.RegisterFile("shoporder.proto", fileDescriptor_a36545d7e981a3b1) }

var fileDescriptor_a36545d7e981a3b1 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xda, 0x75, 0x1b, 0x8f, 0x03, 0x29, 0xab, 0x22, 0x99, 0x00, 0x21, 0x5a, 0x4a, 0xf1,
	0x01, 0xf9, 0x50, 0x9e, 0x80, 0xe2, 0xaa, 0x44, 0x48, 0x50, 0x1c, 0x71, 0xa4, 0xc1, 0x64, 0xb7,
	0xc9, 0x4a, 0x49, 0xd6, 0x78, 0x6d, 0xa4, 0xf4, 0x49, 0x78, 0x1a, 0x6e, 0x20, 0x8e, 0x3c, 0x02,
	0x0a, 0x2f, 0x82, 0xbc, 0xfe, 0x89, 0x89, 0xc0, 0x35, 0xb7, 0xf1, 0x37, 0xdf, 0xcc, 0xec, 0xb7,
	0xdf, 0xac, 0xa1, 0x2b, 0x67, 0x22, 0x14, 0x11, 0x65, 0x91, 0x1b, 0x46, 0x22, 0x16, 0xf8, 0xee,
	0x54, 0xb8, 0x0b, 0x3e, 0x89, 0x84, 0x2b, 0x59, 0xf4, 0x89, 0x4f, 0x98, 0x9b, 0x32, 0x5c, 0x45,
	0x21, 0xb7, 0xa0, 0xfb, 0x6c, 0x3e, 0x7f, 0x9d, 0xc6, 0x3e, 0xfb, 0x98, 0x30, 0x19, 0x93, 0x37,
	0xd0, 0x2e, 0x20, 0x7c, 0x0a, 0xa0, 0x78, 0x63, 0xbe, 0xbc, 0x14, 0x36, 0x1a, 0xe8, 0x8e, 0x75,
	0x7c, 0xe4, 0xd6, 0x34, 0x74, 0x55, 0xdd, 0x70, 0x79, 0x29, 0x7c, 0x53, 0x14, 0x21, 0x39, 0x84,
	0xbd, 0x0c, 0xf7, 0xf0, 0x1d, 0x68, 0xe7, 0x1d, 0xa9, 0x8d, 0x06, 0xc8, 0xd1, 0xfd, 0xbd, 0x8c,
	0x47, 0xc9, 0x17, 0x04, 0x66, 0x59, 0x8e, 0x6f, 0x82, 0x56, 0x52, 0x34, 0x4e, 0xf1, 0x7d, 0x80,
	0x30, 0x58, 0x8d, 0x65, 0x1c, 0xc4, 0x89, 0xb4, 0xb5, 0x01, 0x72, 0x0c, 0xdf, 0x0c, 0x83, 0xd5,
	0x48, 0x01, 0xf8, 0x01, 0x58, 0x72, 0xc6, 0xc3, 0x22, 0xaf, 0xab, 0x3c, 0xa4, 0x50, 0x4e, 0x38,
	0x00, 0x23, 0x8c, 0xf8, 0x84, 0xd9, 0x3b, 0x03, 0xe4, 0x20, 0x3f, 0xfb, 0xc0, 0x2f, 0xa1, 0x93,
	0x1d, 0x87, 0xb2, 0x38, 0xe0, 0x73, 0xdb, 0x50, 0x12, 0x9d, 0xeb, 0x25, 0x7a, 0x8a, 0xef, 0x5b,
	0x62, 0xf3, 0x41, 0xbe, 0x22, 0xb0, 0x2a, 0xc9, 0xbf, 0x4a, 0x88, 0x04, 0x4d, 0x26, 0x71, 0xaa,
	0x5e, 0x53, 0xb8, 0x99, 0x23, 0x43, 0x9a, 0x4a, 0x28, 0xd2, 0xcb, 0x64, 0xa1, 0x24, 0xe8, 0x7e,
	0x51, 0xf1, 0x2a, 0x59, 0xe0, 0x23, 0xe8, 0x16, 0x04, 0xc9, 0xaf, 0x58, 0xda, 0x64, 0x47, 0x91,
	0x6e, 0xe4, 0xf0, 0x88, 0x5f, 0xb1, 0x21, 0xc5, 0x0f, 0xa1, 0x00, 0xc6, 0x99, 0x64, 0x43, 0xb1,
	0x3a, 0x39, 0x78, 0xae, 0x94, 0x57, 0x8d, 0xd8, 0xfd, 0xd3, 0x88, 0x7b, 0xd0, 0xf6, 0x99, 0x0c,
	0xc5, 0x52, 0x32, 0xbc, 0x0f, 0xfa, 0x42, 0x4e, 0x95, 0x08, 0xd3, 0x4f, 0x43, 0x72, 0x0a, 0xe6,
	0x79, 0x79, 0xed, 0xff, 0xb6, 0xf3, 0x1a, 0xc3, 0xc8, 0x0b, 0x80, 0xd1, 0xc6, 0x9d, 0x9a, 0x3e,
	0x5b, 0xce, 0x6a, 0xdb, 0xce, 0x1e, 0x7f, 0x33, 0xc0, 0x1c, 0xcd, 0x44, 0x98, 0xad, 0xec, 0x05,
	0x74, 0xce, 0x58, 0xac, 0xe2, 0x93, 0xd5, 0xd0, 0xc3, 0x87, 0x0d, 0xd6, 0xd5, 0xeb, 0x35, 0x5c,
	0x6a, 0xd2, 0xc2, 0x14, 0xac, 0x33, 0x16, 0x97, 0x2f, 0xe4, 0x49, 0x6d, 0xe1, 0xd6, 0xdb, 0xea,
	0x3d, 0x6a, 0xc4, 0x26, 0x2d, 0xfc, 0x0e, 0xac, 0xe7, 0x11, 0x0b, 0x62, 0x96, 0x4d, 0x69, 0x78,
	0xbc, 0x5e, 0x23, 0xb1, 0xa4, 0x85, 0xdf, 0x43, 0xd7, 0x63, 0x73, 0x96, 0xb7, 0xff, 0x8f, 0x7b,
	0xaa, 0x17, 0x50, 0x6c, 0x0d, 0x69, 0xe1, 0x29, 0x1c, 0xbc, 0x0d, 0x69, 0x21, 0x60, 0xb3, 0x30,
	0xf5, 0x4a, 0x4a, 0x5e, 0xf3, 0x41, 0x1c, 0x6e, 0x57, 0x06, 0x55, 0x56, 0xea, 0x71, 0x6d, 0x87,
	0x0d, 0xb1, 0xf9, 0xa8, 0x0b, 0xb0, 0x2a, 0xa3, 0x1a, 0x9b, 0xd2, 0xb4, 0xff, 0xc9, 0xfe, 0xf7,
	0x75, 0x1f, 0xfd, 0x58, 0xf7, 0xd1, 0xcf, 0x75, 0x1f, 0x7d, 0xfe, 0xd5, 0x6f, 0x7d, 0xd8, 0x55,
	0xbf, 0xf0, 0xa7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x4b, 0x80, 0xbe, 0xd5, 0x05, 0x00,
	0x00,
}

func (m *AllOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AllOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderInfo) > 0 {
		for iNdEx := len(m.OrderInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShoporder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrderID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OrderId != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderDetail) > 0 {
		for iNdEx := len(m.OrderDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShoporder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x21
	}
	if m.ShipStatus != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.ShipStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.PayStatus != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.PayStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OrderId != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x30
	}
	if m.ProductPrice != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.ProductPrice))
		i--
		dAtA[i] = 0x28
	}
	if m.ProductSizeId != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.ProductSizeId))
		i--
		dAtA[i] = 0x20
	}
	if m.ProductNum != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.ProductNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ProductId != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintShoporder(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayStatus != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.PayStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShipStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShipStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShipStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShipStatus != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.ShipStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != 0 {
		i = encodeVarintShoporder(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShoporder(dAtA []byte, offset int, v uint64) int {
	offset -= sovShoporder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderInfo) > 0 {
		for _, e := range m.OrderInfo {
			l = e.Size()
			n += 1 + l + sovShoporder(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovShoporder(uint64(m.OrderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShoporder(uint64(m.Id))
	}
	if m.PayStatus != 0 {
		n += 1 + sovShoporder(uint64(m.PayStatus))
	}
	if m.ShipStatus != 0 {
		n += 1 + sovShoporder(uint64(m.ShipStatus))
	}
	if m.Price != 0 {
		n += 9
	}
	if len(m.OrderDetail) > 0 {
		for _, e := range m.OrderDetail {
			l = e.Size()
			n += 1 + l + sovShoporder(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShoporder(uint64(m.Id))
	}
	if m.ProductId != 0 {
		n += 1 + sovShoporder(uint64(m.ProductId))
	}
	if m.ProductNum != 0 {
		n += 1 + sovShoporder(uint64(m.ProductNum))
	}
	if m.ProductSizeId != 0 {
		n += 1 + sovShoporder(uint64(m.ProductSizeId))
	}
	if m.ProductPrice != 0 {
		n += 1 + sovShoporder(uint64(m.ProductPrice))
	}
	if m.OrderId != 0 {
		n += 1 + sovShoporder(uint64(m.OrderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovShoporder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovShoporder(uint64(m.OrderId))
	}
	if m.PayStatus != 0 {
		n += 1 + sovShoporder(uint64(m.PayStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShipStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovShoporder(uint64(m.OrderId))
	}
	if m.ShipStatus != 0 {
		n += 1 + sovShoporder(uint64(m.ShipStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShoporder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShoporder(x uint64) (n int) {
	return sovShoporder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShoporder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShoporder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderInfo = append(m.OrderInfo, &OrderInfo{})
			if err := m.OrderInfo[len(m.OrderInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStatus", wireType)
			}
			m.PayStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipStatus", wireType)
			}
			m.ShipStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShoporder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShoporder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderDetail = append(m.OrderDetail, &OrderDetail{})
			if err := m.OrderDetail[len(m.OrderDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductNum", wireType)
			}
			m.ProductNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductSizeId", wireType)
			}
			m.ProductSizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductSizeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductPrice", wireType)
			}
			m.ProductPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShoporder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShoporder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStatus", wireType)
			}
			m.PayStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShipStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipStatus", wireType)
			}
			m.ShipStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShoporder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShoporder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShoporder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShoporder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShoporder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShoporder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShoporder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShoporder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShoporder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShoporder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShoporder = fmt.Errorf("proto: unexpected end of group")
)
