// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shoporder.proto

package go_micro_service_shop_order

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShopOrder service

func NewShopOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShopOrder service

type ShopOrderService interface {
	GetOrderByID(ctx context.Context, in *OrderID, opts ...client.CallOption) (*OrderInfo, error)
	GetAllOrder(ctx context.Context, in *AllOrderRequest, opts ...client.CallOption) (*AllOrder, error)
	CreateOrder(ctx context.Context, in *OrderInfo, opts ...client.CallOption) (*OrderID, error)
	DeleteOrderByID(ctx context.Context, in *OrderID, opts ...client.CallOption) (*Response, error)
	UpdateOrderPayStatus(ctx context.Context, in *PayStatus, opts ...client.CallOption) (*Response, error)
	UpdateOrderShipStatus(ctx context.Context, in *ShipStatus, opts ...client.CallOption) (*Response, error)
	UpdateOrder(ctx context.Context, in *OrderInfo, opts ...client.CallOption) (*Response, error)
}

type shopOrderService struct {
	c    client.Client
	name string
}

func NewShopOrderService(name string, c client.Client) ShopOrderService {
	return &shopOrderService{
		c:    c,
		name: name,
	}
}

func (c *shopOrderService) GetOrderByID(ctx context.Context, in *OrderID, opts ...client.CallOption) (*OrderInfo, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.GetOrderByID", in)
	out := new(OrderInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopOrderService) GetAllOrder(ctx context.Context, in *AllOrderRequest, opts ...client.CallOption) (*AllOrder, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.GetAllOrder", in)
	out := new(AllOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopOrderService) CreateOrder(ctx context.Context, in *OrderInfo, opts ...client.CallOption) (*OrderID, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.CreateOrder", in)
	out := new(OrderID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopOrderService) DeleteOrderByID(ctx context.Context, in *OrderID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.DeleteOrderByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopOrderService) UpdateOrderPayStatus(ctx context.Context, in *PayStatus, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.UpdateOrderPayStatus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopOrderService) UpdateOrderShipStatus(ctx context.Context, in *ShipStatus, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.UpdateOrderShipStatus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopOrderService) UpdateOrder(ctx context.Context, in *OrderInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShopOrder.UpdateOrder", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopOrder service

type ShopOrderHandler interface {
	GetOrderByID(context.Context, *OrderID, *OrderInfo) error
	GetAllOrder(context.Context, *AllOrderRequest, *AllOrder) error
	CreateOrder(context.Context, *OrderInfo, *OrderID) error
	DeleteOrderByID(context.Context, *OrderID, *Response) error
	UpdateOrderPayStatus(context.Context, *PayStatus, *Response) error
	UpdateOrderShipStatus(context.Context, *ShipStatus, *Response) error
	UpdateOrder(context.Context, *OrderInfo, *Response) error
}

func RegisterShopOrderHandler(s server.Server, hdlr ShopOrderHandler, opts ...server.HandlerOption) error {
	type shopOrder interface {
		GetOrderByID(ctx context.Context, in *OrderID, out *OrderInfo) error
		GetAllOrder(ctx context.Context, in *AllOrderRequest, out *AllOrder) error
		CreateOrder(ctx context.Context, in *OrderInfo, out *OrderID) error
		DeleteOrderByID(ctx context.Context, in *OrderID, out *Response) error
		UpdateOrderPayStatus(ctx context.Context, in *PayStatus, out *Response) error
		UpdateOrderShipStatus(ctx context.Context, in *ShipStatus, out *Response) error
		UpdateOrder(ctx context.Context, in *OrderInfo, out *Response) error
	}
	type ShopOrder struct {
		shopOrder
	}
	h := &shopOrderHandler{hdlr}
	return s.Handle(s.NewHandler(&ShopOrder{h}, opts...))
}

type shopOrderHandler struct {
	ShopOrderHandler
}

func (h *shopOrderHandler) GetOrderByID(ctx context.Context, in *OrderID, out *OrderInfo) error {
	return h.ShopOrderHandler.GetOrderByID(ctx, in, out)
}

func (h *shopOrderHandler) GetAllOrder(ctx context.Context, in *AllOrderRequest, out *AllOrder) error {
	return h.ShopOrderHandler.GetAllOrder(ctx, in, out)
}

func (h *shopOrderHandler) CreateOrder(ctx context.Context, in *OrderInfo, out *OrderID) error {
	return h.ShopOrderHandler.CreateOrder(ctx, in, out)
}

func (h *shopOrderHandler) DeleteOrderByID(ctx context.Context, in *OrderID, out *Response) error {
	return h.ShopOrderHandler.DeleteOrderByID(ctx, in, out)
}

func (h *shopOrderHandler) UpdateOrderPayStatus(ctx context.Context, in *PayStatus, out *Response) error {
	return h.ShopOrderHandler.UpdateOrderPayStatus(ctx, in, out)
}

func (h *shopOrderHandler) UpdateOrderShipStatus(ctx context.Context, in *ShipStatus, out *Response) error {
	return h.ShopOrderHandler.UpdateOrderShipStatus(ctx, in, out)
}

func (h *shopOrderHandler) UpdateOrder(ctx context.Context, in *OrderInfo, out *Response) error {
	return h.ShopOrderHandler.UpdateOrder(ctx, in, out)
}
